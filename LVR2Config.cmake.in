# -----------------------------------------------------------------
# lvr's cmake configuration
#
# provided options:
# - LVR2_USE_STATIC_LIBS(=OFF) to link the static libraries of lvr
#
# provided interface variables:
# - LVR2_INCLUDE_DIRS
# - LVR2_DEFINITIONS
# - LVR2_LIBRARIES
#
# Do not forget to add_defintions(${LVR2_DEFINITIONS}) as they
# describe the build configuration of liblvr.
#
# -----------------------------------------------------------------
@PACKAGE_INIT@
include("${CMAKE_CURRENT_LIST_DIR}/lvr2Targets.cmake")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/Modules")

cmake_policy(PUSH)
cmake_policy(SET CMP0012 NEW)

set(LVR2_INCLUDE_DIRS @LVR2_INSTALL_INCLUDE_DIRS@)
set(LVR2_DEFINITIONS @LVR2_DEFINITIONS@)

find_package(PkgConfig REQUIRED)

set(LVR2_LIB_DIR @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@)

option(LVR2_USE_STATIC_LIBS OFF)
if(LVR2_USE_STATIC_LIBS)
  set(LVR2_LIBRARY ${LVR2_LIB_DIR}/liblvr2_static.a)
  set(LVR2_LIBRARIES ${LVR2_LIBRARY})
else()
  set(LVR2_LIBRARY ${LVR2_LIB_DIR}/liblvr2.so)
  set(LVR2_LIBRARIES ${LVR2_LIBRARY})
endif()


# MPI
if(@MPI_FOUND@)
  find_package(MPI REQUIRED)
  list(APPEND LVR2_INCLUDE_DIRS ${MPI_INCLUDE_PATH})
  list(APPEND LVR2_LIBRARIES ${MPI_CXX_LIBRARIES})
endif(@MPI_FOUND@)

###################
## REQUIRED DEPS ##
###################

# TBB
find_package(TBB REQUIRED)
list(APPEND LVR2_LIBRARIES TBB::tbb)

# TIFF
find_package(TIFF REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${TIFF_INCLUDE_DIRS})
list(APPEND LVR2_LIBRARIES ${TIFF_LIBRARY})

# GDAL
find_package(GDAL REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${GDAL_INCLUDE_DIR})
list(APPEND LVR2_LIBRARIES ${GDAL_LIBRARY})

# OpenCV
find_package(OpenCV REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${OpenCV_INCLUDE_DIRS})
list(APPEND LVR2_LIBRARIES ${OpenCV_LIBS})

# FLANN
find_package(FLANN REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${FLANN_INCLUDE_DIR})

# Lz4
find_package(LZ4 REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${LZ4_INCLUDE_DIR})
list(APPEND LVR2_LIBRARIES ${LZ4_LIBRARY})

# GSL
find_package(GSL REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${GSL_INCLUDE_DIRS})
list(APPEND LVR2_LIBRARIES ${GSL_LIBRARIES})

# Eigen
find_package(Eigen3 REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})

# YAML-CPP
find_package(yaml-cpp REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${YAML_CPP_INCLUDE_DIR})
list(APPEND LVR2_LIBRARIES ${YAML_CPP_LIBRARIES})

# Boost
find_package(Boost COMPONENTS @Boost_COMPONENTS@ REQUIRED QUIET)
list(APPEND LVR2_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
list(APPEND LVR2_DEFINITIONS ${Boost_LIB_DIAGNOSTIC_DEFINITIONS})
list(APPEND LVR2_LIBRARIES ${Boost_LIBRARIES})

# HDF5
find_package(HDF5 REQUIRED COMPONENTS C CXX HL)
list(APPEND LVR2_INCLUDE_DIRS ${HDF5_INCLUDE_DIRS})
list(APPEND LVR2_LIBRARIES ${HDF5_LIBRARIES} ${HDF5_HL_LIBRARIES})

# OpenGL
find_package(OpenGL COMPONENTS OpenGL)
list(APPEND LVR2_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})
list(APPEND LVR2_LIBRARIES ${OPENGL_LIBRARIES})

# GLUT
find_package(GLUT REQUIRED)
list(APPEND LVR2_INCLUDE_DIRS ${GLUT_INCLUDE_DIR})
list(APPEND LVR2_LIBRARIES ${GLUT_LIBRARIES})

# RPLY
if(LVR2_USE_STATIC_LIBS)
  list(APPEND LVR2_LIBRARIES ${LVR2_LIB_DIR}/liblvr2rply_static.a)
else()
  list(APPEND LVR2_LIBRARIES ${LVR2_LIB_DIR}/liblvr2rply.so)
endif()

# LAS
if(LVR2_USE_STATIC_LIBS)
  list(APPEND LVR2_LIBRARIES ${LVR2_LIB_DIR}/liblvr2las_static.a)
else()
  list(APPEND LVR2_LIBRARIES ${LVR2_LIB_DIR}/liblvr2las.so)
endif()

#####################
##  OPTIONAL DEPS  ##
#####################
if(@RDB_FOUND@)
  find_package(RDB)
  list(APPEND LVR2_INCLUDE_DIRS ${RDB_INCLUDE_DIRS})
endif(@RDB_FOUND@)

# VTK
if(@VTK_FOUND@)
    find_package(VTK REQUIRED)
    list(APPEND LVR2_INCLUDE_DIRS ${VTK_INCLUDE_DIRS})
    list(APPEND LVR2_DEFINITIONS ${VTK_DEFINITIONS})
endif()

# pcl
if(@PCL_FOUND@)
  find_package(PCL REQUIRED)
  list(APPEND LVR2_INCLUDE_DIRS ${PCL_INCLUDE_DIRS})
  list(APPEND LVR2_DEFINITIONS ${PCL_DEFINITIONS})
endif()

# cgal
if(@CGAL_FOUND@)
  find_package(CGAL REQUIRED)
  list(APPEND LVR2_INCLUDE_DIRS ${CGAL_INCLUDE_DIRS})
endif()

# libfreenect
if(@LIBFREENECT_FOUND@)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(LIBFREENECT REQUIRED libfreenect)
  list(APPEND LVR2_INCLUDE_DIRS ${LIBFREENECT_INCLUDE_DIRS})
endif()

# Embree
if(@embree_FOUND@)
    set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)
    find_package(embree 4.0 REQUIRED)
    list(APPEND LVR2_INCLUDE_DIRS ${EMBREE_INCLUDE_DIRS})
    list(APPEND LVR2_LIBRARIES ${EMBREE_LIBRARY})
endif()

cmake_policy(POP)

set(LVR2_FOUND TRUE)
